spring.application.name=API-GateWay

server.port=8767
 
spring.config.import=optional:configserver:http://localhost:9092


eureka.instance.prefer-ip-address=true
eureka.instance.hostname=localhost
# Explicitly disable the discovery locator to prevent conflicts with manual routes.
# Manual routes offer better control and are generally preferred.
spring.cloud.gateway.server.webflux.discovery.locator.enabled=false
spring.cloud.gateway.server.webflux.discovery.locator.lower-case-service-id=true
 
# Eureka client configuration 
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
 
# ------------------------------------
# Route for REATAURANT-SERVICE
# ------------------------------------
 
 
spring.cloud.gateway.server.webflux.routes[0].id=restaurant-service-route
spring.cloud.gateway.server.webflux.routes[0].uri=lb://RestaurantService
spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/api/restaurants**
 
 
 
 
# ------------------------------------
# Route for QUESTION-SERVICE
# ------------------------------------
spring.cloud.gateway.server.webflux.routes[1].id=customer-service-route
spring.cloud.gateway.server.webflux.routes[1].uri=lb://CustomerService
spring.cloud.gateway.server.webflux.routes[1].predicates[0]=Path=/api/customers**


# ------------------------------------
# Route for ORDER-SERVICE
# ------------------------------------
spring.cloud.gateway.server.webflux.routes[2].id=order-service-route
spring.cloud.gateway.server.webflux.routes[2].uri=lb://OrderService
spring.cloud.gateway.server.webflux.routes[2].predicates[0]=Path=/api/orders**


# ------------------------------------
# Route for DELIVERY-SERVICE
# ------------------------------------
spring.cloud.gateway.server.webflux.routes[3].id=delivery-service-route
spring.cloud.gateway.server.webflux.routes[3].uri=lb://DeliveryService
spring.cloud.gateway.server.webflux.routes[3].predicates[0]=Path=/api/deliveries**

# ------------------------------------
# Route for PAYMENT-SERVICE
# ------------------------------------
spring.cloud.gateway.server.webflux.routes[4].id=payment-service-route
spring.cloud.gateway.server.webflux.routes[4].uri=lb://PaymentService
spring.cloud.gateway.server.webflux.routes[4].predicates[0]=Path=/api/payments**

# ------------------------------------
# Route for MESSAGE-SERVICE
# ------------------------------------
spring.cloud.gateway.server.webflux.routes[5].id=message-service-route
spring.cloud.gateway.server.webflux.routes[5].uri=lb://MessageService
spring.cloud.gateway.server.webflux.routes[5].predicates[0]=Path=/api/messages**




logging.level.io.github.resilience4j.circuitbreaker=DEBUG
logging.level.io.github.resilience4j.retry=DEBUG
 
 
 
 
 
 
# ================================
# Actuator & Circuit Breaker Health
# ================================
 #Turns on a “health check” for circuit breakers.
management.health.circuitbreakers.enabled=true
#Makes the /actuator/health endpoint accessible over HTTP.

#Always show detailed info in /actuator/health instead of just saying "status": "UP".
management.endpoint.health.show-details=always

management.endpoints.web.exposure.include=*
management.endpoint.prometheus.access=unrestricted
 

 
 
# ================================
# Resilience4j Circuit Breaker Defaults
# ================================
 
 
#Registers the circuit breaker with Spring Boot’s health system so Actuator can monitor it.
resilience4j.circuitbreaker.configs.default.register-health-indicator=true
#The breaker looks at the last 10 calls to decide whether to open or stay closed.
resilience4j.circuitbreaker.configs.default.sliding-window-size=10
#Don’t judge the service until at least 5 calls have been made.
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5
#When the breaker is HALF_OPEN, only let 3 test calls go through before deciding if the service is healthy again.
resilience4j.circuitbreaker.configs.default.permitted-number-of-calls-in-half-open-state=3
#The breaker will automatically try again after a wait time — you don’t have to manually reset it.
resilience4j.circuitbreaker.configs.default.automatic-transition-from-open-to-half-open-enabled=true
#If the breaker is OPEN, wait 5 seconds before testing again.
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=5s
# If 50% or more of the calls fail in the window, the breaker will OPEN.
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50
#Keep the last 10 events (success, failure, state changes) in memory for logging and monitoring.
resilience4j.circuitbreaker.configs.default.event-consumer-buffer-size=10
 
 
 
 # Distributed Tracing Configuration
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
# Log pattern to include traceId and spanId for Spring Boot 3.x
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} [%X{traceId:-},%X{spanId:-}] - %msg%n
 
# Additional tracing configuration
management.tracing.enabled=true
management.zipkin.tracing.enabled=true
 
# Ensure proper service name propagation
management.tracing.baggage.remote-fields=service-name
spring.cloud.compatibility-verifier.enabled=false
 







