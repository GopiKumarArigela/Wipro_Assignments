package com.example.gow.orderservice.service;

import com.example.gow.orderservice.datatransferobject.OrderItemDTO;
import com.example.gow.orderservice.datatransferobject.OrderItemResponseDTO;
import com.example.gow.orderservice.datatransferobject.OrderRequestDTO;
import com.example.gow.orderservice.datatransferobject.OrderResponseDTO;
import com.example.gow.orderservice.entities.Order;
import com.example.gow.orderservice.entities.OrderItem;
import com.example.gow.orderservice.entities.OrderStatus;
import com.example.gow.orderservice.exception.ResourceNotFoundException;
import com.example.gow.orderservice.repository.OrderRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class OrderService {

    private final OrderRepository orderRepository;

    @Transactional
    public OrderResponseDTO createOrder(OrderRequestDTO request) {
        // Basic null/empty checks
        if (request == null) {
            throw new IllegalArgumentException("Order request must not be null");
        }
        if (request.getItems() == null || request.getItems().isEmpty()) {
            throw new IllegalArgumentException("Order must contain at least one item");
        }

        // Build Order entity
        Order order = new Order();
        order.setOrderNumber(UUID.randomUUID().toString());
        order.setCustomerId(request.getCustomerId());
        order.setRestaurantId(request.getRestaurantId());
        order.setOrderDate(LocalDateTime.now());
        order.setStatus(OrderStatus.CREATED);
        order.setNotes(request.getNotes());

        // Map DTO items to entity items
        List<OrderItem> items = request.getItems().stream().map(dto -> {
            OrderItem item = new OrderItem();
            item.setItemName(dto.getItemName());
            item.setQuantity(dto.getQuantity());
            item.setUnitPrice(dto.getUnitPrice());
            item.setOrder(order); // set the parent order
            return item;
        }).collect(Collectors.toList());

        order.setItems(items);

        // Calculate total amount
        BigDecimal totalAmount = items.stream()
        	    .map(i -> i.getUnitPrice().multiply(BigDecimal.valueOf(i.getQuantity())))
        	    .reduce(BigDecimal.ZERO, BigDecimal::add);

        	order.setTotalAmount(totalAmount);

        // Save order
        Order savedOrder = orderRepository.save(order);

        // Convert to Response DTO
        return toResponseDTO(savedOrder);
    }

    public OrderResponseDTO getOrder(Long orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow();
        return toResponseDTO(order);
    }

    public List<OrderResponseDTO> getByCustomer(Long customerId) {
        return orderRepository.findByCustomerId(customerId).stream()
                .map(this::toResponseDTO)
                .collect(Collectors.toList());
    }

    public List<OrderResponseDTO> getByRestaurant(Long restaurantId) {
        return orderRepository.findByRestaurantId(restaurantId).stream()
                .map(this::toResponseDTO)
                .collect(Collectors.toList());
    }

    @Transactional
    public OrderResponseDTO updateStatus(Long orderId, OrderStatus status) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow();
        order.setStatus(status);
        Order saved = orderRepository.save(order);
        return toResponseDTO(saved);
    }

    
    // ===== Mapping helpers =====

    private OrderResponseDTO toResponseDTO(Order order) {
        List<OrderItemResponseDTO> itemDTOs = (order.getItems() == null ? List.<OrderItemResponseDTO>of()
                : order.getItems().stream().map(i ->
                        new OrderItemResponseDTO())
                .collect(Collectors.toList()));

        OrderResponseDTO dto = new OrderResponseDTO();
        dto.setId(order.getId());
        dto.setOrderNumber(order.getOrderNumber());
        dto.setCustomerId(order.getCustomerId());
        dto.setRestaurantId(order.getRestaurantId());
        dto.setOrderDate(order.getOrderDate());
        dto.setNotes(order.getNotes());
        dto.setTotalAmount(order.getTotalAmount());
        dto.setStatus(order.getStatus() == null ? null : order.getStatus().name());
        dto.setItems(itemDTOs);
        return dto;
    }
}
